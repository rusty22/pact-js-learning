
> pact@1.0.0 test:graphql:consumer
> jest graphql/consumer/graphql-client-contract.glen.spec.js

[22:27:46.697] [34mDEBUG[39m (17200): [36mpact-core@16.1.0: binding path #0: : attempting to load native module from: 

 - C:\Users\Glen\Desktop\Projects\pact-js-learning\node_modules\@pact-foundation\pact-core-windows-x64\prebuilds\win32-x64 
   source: pact-js-core binding lookup 

 - You can override via PACT_PREBUILD_LOCATION
[39m
[22:27:46.705] [32mINFO[39m (17200): [36m0.4.22: pact native library successfully found, and the correct version[39m
[22:27:46.706] [34mDEBUG[39m (17200): [36mpact-core@16.1.0: Initialising native core at log level 'debug'[39m
2025-09-13T02:27:46.730023Z DEBUG ThreadId(01) pact_ffi::mock_server::handles: Failed to parse the value, treating it as a plain string: expected value at line 1 column 1
2025-09-13T02:27:46.730676Z DEBUG ThreadId(01) pact_models::content_types: Detecting content type from contents: '{"operationName":"MovieQuery","query":{"value":"\n                    query MovieQuery($movieId: Int!) {\n                        movie(movieId: $movieId) {\n                            id\n                            name\n                            year\n                        }\n                    }\n                    ","regex":"\\s*query\\s*MovieQuery\\(\\$movieId:\\s*Int!\\)\\s*\\{\\s*movie\\(movieId:\\s*\\$movieId\\)\\s*\\{\\s*id\\s*name\\s*year\\s*\\}\\s*\\}\\s*","pact:matcher:type":"regex"},"variables":{"movieId":1}}'
2025-09-13T02:27:46.734025Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Path = $
2025-09-13T02:27:46.734070Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Configuring a normal object
2025-09-13T02:27:46.734153Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Path = $.query
2025-09-13T02:27:46.734162Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: detected pact:matcher:type, will configure a matcher
2025-09-13T02:27:46.734218Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Path = $.variables
2025-09-13T02:27:46.734225Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Configuring a normal object
[22:27:46.733] [34mDEBUG[39m (17200): [36mpact@15.0.1: setting header request value for Content-Type at index 0 to "application/json"[39m
2025-09-13T02:27:46.734824Z DEBUG ThreadId(01) pact_ffi::mock_server::handles: Failed to parse the value, treating it as a plain string: expected value at line 1 column 1
2025-09-13T02:27:46.734838Z DEBUG ThreadId(01) pact_ffi::mock_server::handles: parsed header value: Left("application/json")
2025-09-13T02:27:46.734945Z DEBUG ThreadId(01) pact_models::content_types: Detecting content type from contents: '{"data":{"movie":{"id":{"pact:matcher:type":"integer","value":1},"name":{"pact:matcher:type":"type","value":"Demon Slayer: Infinity Castle"},"year":{"pact:matcher:type":"integer","value":2025}}}}'
2025-09-13T02:27:46.734964Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Path = $
2025-09-13T02:27:46.734968Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Configuring a normal object
2025-09-13T02:27:46.734973Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Path = $.data
2025-09-13T02:27:46.734976Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Configuring a normal object
2025-09-13T02:27:46.734980Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Path = $.data.movie
2025-09-13T02:27:46.734983Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Configuring a normal object
2025-09-13T02:27:46.734987Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Path = $.data.movie.id
2025-09-13T02:27:46.734990Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: detected pact:matcher:type, will configure a matcher
2025-09-13T02:27:46.734999Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Path = $.data.movie.name
2025-09-13T02:27:46.735002Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: detected pact:matcher:type, will configure a matcher
2025-09-13T02:27:46.735009Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Path = $.data.movie.year
2025-09-13T02:27:46.735012Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: detected pact:matcher:type, will configure a matcher
[22:27:46.734] [34mDEBUG[39m (17200): [36mpact@15.0.1: setting header response value for application/json; charset=utf-8 at index 0 to "application/json; charset=utf-8"[39m
2025-09-13T02:27:46.735297Z DEBUG ThreadId(01) pact_ffi::mock_server::handles: Failed to parse the value, treating it as a plain string: expected value at line 1 column 1
2025-09-13T02:27:46.735307Z DEBUG ThreadId(01) pact_ffi::mock_server::handles: parsed header value: Left("application/json; charset=utf-8")
[22:27:46.734] [34mDEBUG[39m (17200): [36mpact@15.0.1: Setting up Pact mock server with Consumer "GraphQLConsumer" and Provider "GraphQLProvider"
        using mock service on Port: "4000"[39m
2025-09-13T02:27:46.735595Z DEBUG ThreadId(01) pact_plugin_driver::catalogue_manager: Updated catalogue entries:
core/transport/http
core/transport/https
2025-09-13T02:27:46.735630Z DEBUG ThreadId(01) pact_plugin_driver::catalogue_manager: Updated catalogue entries:
core/content-generator/binary
core/content-generator/json
core/content-matcher/json
core/content-matcher/multipart-form-data
core/content-matcher/text
core/content-matcher/xml
2025-09-13T02:27:46.735661Z DEBUG ThreadId(01) pact_plugin_driver::catalogue_manager: Updated catalogue entries:
core/matcher/v1-equality
core/matcher/v2-max-type
core/matcher/v2-min-type
core/matcher/v2-minmax-type
core/matcher/v2-regex
core/matcher/v2-type
core/matcher/v3-content-type
core/matcher/v3-date
core/matcher/v3-datetime
core/matcher/v3-decimal-type
core/matcher/v3-includes
core/matcher/v3-integer-type
core/matcher/v3-null
core/matcher/v3-number-type
core/matcher/v3-time
core/matcher/v4-array-contains
core/matcher/v4-equals-ignore-order
core/matcher/v4-max-equals-ignore-order
core/matcher/v4-min-equals-ignore-order
core/matcher/v4-minmax-equals-ignore-order
core/matcher/v4-not-empty
core/matcher/v4-semver
2025-09-13T02:27:46.735992Z DEBUG ThreadId(01) pact_mock_server::mock_server: Started mock server on 127.0.0.1:4000
[22:27:46.735] [34mDEBUG[39m (17200): [36mpact@15.0.1: mock service started on port: 4000[39m
2025-09-13T02:27:46.749277Z DEBUG tokio-runtime-worker hyper::proto::h1::io: parsed 7 headers
2025-09-13T02:27:46.749311Z DEBUG tokio-runtime-worker hyper::proto::h1::conn: incoming body is content-length (167 bytes)
2025-09-13T02:27:46.749332Z DEBUG tokio-runtime-worker hyper::proto::h1::conn: incoming body completed
2025-09-13T02:27:46.749352Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Creating pact request from hyper request
2025-09-13T02:27:46.749364Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Extracting query from uri /graphql
2025-09-13T02:27:46.749408Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Received request POST /graphql
2025-09-13T02:27:46.749416Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: 
      ----------------------------------------------------------------------------------------
       method: POST
       path: /graphql
       query: None
       headers: Some({"user-agent": ["node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"], "accept-encoding": ["gzip", "deflate"], "host": ["127.0.0.1:4000"], "content-length": ["167"], "connection": ["keep-alive"], "accept": ["*/*"], "content-type": ["application/json"]})
       body: Present(167 bytes, application/json) '{"operationName":"MovieQuery","variables":{"movieId":1},"query":"query MovieQuery($movieId: Int!) {\n  movie(movieId: $movieId) {\n    id\n    name\n    year\n  }\n}"}'
      ----------------------------------------------------------------------------------------
      
2025-09-13T02:27:46.749475Z DEBUG tokio-runtime-worker pact_matching: comparing to expected HTTP Request ( method: POST, path: /graphql, query: None, headers: Some({"Content-Type": ["application/json"]}), body: Present(347 bytes, application/json) )
2025-09-13T02:27:46.749484Z DEBUG tokio-runtime-worker pact_matching:      body: '{"operationName":"MovieQuery","query":"\n                    query MovieQuery($movieId: Int!) {\n                        movie(movieId: $movieId) {\n                            id\n                            name\n                            year\n                        }\n                    }\n                    ","variables":{"movieId":1}}'
2025-09-13T02:27:46.749524Z DEBUG tokio-runtime-worker pact_matching:      matching_rules: MatchingRules { rules: {PATH: MatchingRuleCategory { name: PATH, rules: {} }, BODY: MatchingRuleCategory { name: BODY, rules: {DocPath { path_tokens: [Root, Field("query")], expr: "$.query" }: RuleList { rules: [Regex("\\s*query\\s*MovieQuery\\(\\$movieId:\\s*Int!\\)\\s*\\{\\s*movie\\(movieId:\\s*\\$movieId\\)\\s*\\{\\s*id\\s*name\\s*year\\s*\\}\\s*\\}\\s*")], rule_logic: And, cascaded: false }} }, HEADER: MatchingRuleCategory { name: HEADER, rules: {} }} }
2025-09-13T02:27:46.749539Z DEBUG tokio-runtime-worker pact_matching:      generators: Generators { categories: {} }
2025-09-13T02:27:46.749575Z DEBUG tokio-runtime-worker pact_matching::matchers: String -> String: comparing '/graphql' to '/graphql' ==> true cascaded=false matcher=Equality
2025-09-13T02:27:46.749582Z DEBUG tokio-runtime-worker pact_matching: expected content type = 'application/json', actual content type = 'application/json'
2025-09-13T02:27:46.749614Z DEBUG tokio-runtime-worker pact_matching: content type header matcher = 'RuleList { rules: [], rule_logic: And, cascaded: false }'
2025-09-13T02:27:46.749623Z DEBUG tokio-runtime-worker pact_plugin_driver::catalogue_manager: Looking for a content matcher for application/json
2025-09-13T02:27:46.750000Z DEBUG tokio-runtime-worker pact_matching: No content matcher defined for content type 'application/json', using core matcher implementation
2025-09-13T02:27:46.750012Z DEBUG tokio-runtime-worker pact_matching: Using body matcher for content type 'application/json'
2025-09-13T02:27:46.750027Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $
2025-09-13T02:27:46.750033Z DEBUG tokio-runtime-worker pact_matching::json: compare_maps: Comparing maps at $: {"operationName": String("MovieQuery"), "query": String("\n                    query MovieQuery($movieId: Int!) {\n                        movie(movieId: $movieId) {\n                            id\n                            name\n                            year\n                        }\n                    }\n                    "), "variables": Object {"movieId": Number(1)}} -> {"operationName": String("MovieQuery"), "query": String("query MovieQuery($movieId: Int!) {\n  movie(movieId: $movieId) {\n    id\n    name\n    year\n  }\n}"), "variables": Object {"movieId": Number(1)}}
2025-09-13T02:27:46.750075Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.operationName
2025-09-13T02:27:46.750081Z DEBUG tokio-runtime-worker pact_matching::json: JSON -> JSON: Comparing '"MovieQuery"' to '"MovieQuery"' using Equality -> Ok(())
2025-09-13T02:27:46.750086Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Comparing 'String("MovieQuery")' to 'String("MovieQuery")' at path '$.operationName' -> Ok(())
2025-09-13T02:27:46.750092Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.query
2025-09-13T02:27:46.750097Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Calling match_values for path $.query
2025-09-13T02:27:46.750165Z DEBUG tokio-runtime-worker pact_matching::json: JSON -> JSON: Comparing '"\n                    query MovieQuery($movieId: Int!) {\n                        movie(movieId: $movieId) {\n                            id\n                            name\n                            year\n                        }\n                    }\n                    "' to '"query MovieQuery($movieId: Int!) {\n  movie(movieId: $movieId) {\n    id\n    name\n    year\n  }\n}"' using Regex("\\s*query\\s*MovieQuery\\(\\$movieId:\\s*Int!\\)\\s*\\{\\s*movie\\(movieId:\\s*\\$movieId\\)\\s*\\{\\s*id\\s*name\\s*year\\s*\\}\\s*\\}\\s*") -> Ok(())
2025-09-13T02:27:46.750172Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Comparing 'String("\n                    query MovieQuery($movieId: Int!) {\n                        movie(movieId: $movieId) {\n                            id\n                            name\n                            year\n                        }\n                    }\n                    ")' to 'String("query MovieQuery($movieId: Int!) {\n  movie(movieId: $movieId) {\n    id\n    name\n    year\n  }\n}")' at path '$.query' -> Ok(())
2025-09-13T02:27:46.750179Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.variables
2025-09-13T02:27:46.750184Z DEBUG tokio-runtime-worker pact_matching::json: compare_maps: Comparing maps at $.variables: {"movieId": Number(1)} -> {"movieId": Number(1)}
2025-09-13T02:27:46.750191Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.variables.movieId
2025-09-13T02:27:46.750195Z DEBUG tokio-runtime-worker pact_matching::json: JSON -> JSON: Comparing '1' to '1' using Equality -> Ok(())
2025-09-13T02:27:46.750208Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Comparing 'Number(1)' to 'Number(1)' at path '$.variables.movieId' -> Ok(())
2025-09-13T02:27:46.750232Z DEBUG tokio-runtime-worker pact_matching: --> Mismatches: []
2025-09-13T02:27:46.750261Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Test context = {"mockServer": Object {"port": Number(4000), "url": String("http://127.0.0.1:4000")}}
2025-09-13T02:27:46.750272Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Request matched, sending response
2025-09-13T02:27:46.750277Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: 
          ----------------------------------------------------------------------------------------
           status: 200
           headers: Some({"Content-Type": ["application/json; charset=utf-8"]})
           body: Present(78 bytes, application/json;charset=utf-8) '{"data":{"movie":{"id":1,"name":"Demon Slayer: Infinity Castle","year":2025}}}'
          ----------------------------------------------------------------------------------------
          
2025-09-13T02:27:46.750348Z DEBUG tokio-runtime-worker hyper::proto::h1::io: flushed 445 bytes
2025-09-13T02:27:46.755416Z DEBUG ThreadId(01) pact_ffi::mock_server::handles: pact_ffi::mock_server::handles::pactffi_pact_handle_write_file FFI function invoked
2025-09-13T02:27:46.755813Z DEBUG ThreadId(01) pact_models::pact: Merging pact with file "C:\\Users\\Glen\\Desktop\\Projects\\pact-js-learning\\pacts\\GraphQLConsumer-GraphQLProvider.json"
2025-09-13T02:27:46.756063Z  WARN ThreadId(01) pact_models::pact: Note: Existing pact is an older specification version (V2), and will be upgraded
[22:27:46.756] [34mDEBUG[39m (17200): [36mpact@15.0.1: cleaning up old mock server on port 4000[39m
2025-09-13T02:27:46.757157Z DEBUG ThreadId(01) pact_matching::metrics: Could not get the tokio runtime, will not send metrics - there is no reactor running, must be called from the context of a Tokio 1.x runtime
2025-09-13T02:27:46.757173Z DEBUG ThreadId(01) pact_mock_server::server_manager: Shutting down mock server with ID 1cfddfdb-3894-49fd-87c6-eb70f4e8bc1d - MockServerMetrics { requests: 1, requests_by_path: {"/graphql": 1} }
2025-09-13T02:27:46.757189Z DEBUG ThreadId(01) pact_mock_server::mock_server: Mock server 1cfddfdb-3894-49fd-87c6-eb70f4e8bc1d shutdown - MockServerMetrics { requests: 1, requests_by_path: {"/graphql": 1} }
2025-09-13T02:27:46.757202Z DEBUG tokio-runtime-worker hyper::server::shutdown: signal received, starting graceful shutdown
2025-09-13T02:27:46.758217Z DEBUG ThreadId(01) pact_ffi::mock_server::handles: Failed to parse the value, treating it as a plain string: expected value at line 1 column 1
2025-09-13T02:27:46.758249Z DEBUG ThreadId(01) pact_models::content_types: Detecting content type from contents: '{"operationName":"MoviesQuery","query":{"value":"\n                    query MoviesQuery {\n                        movies {\n                            id\n                            name\n                            year\n                        }\n                    }\n                    ","regex":"\\s*query\\s*MoviesQuery\\s*\\{\\s*movies\\s*\\{\\s*id\\s*name\\s*year\\s*\\}\\s*\\}\\s*","pact:matcher:type":"regex"},"variables":{}}'
2025-09-13T02:27:46.758292Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Path = $
2025-09-13T02:27:46.758298Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Configuring a normal object
2025-09-13T02:27:46.758305Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Path = $.query
2025-09-13T02:27:46.758309Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: detected pact:matcher:type, will configure a matcher
2025-09-13T02:27:46.758318Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Path = $.variables
2025-09-13T02:27:46.758321Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Configuring a normal object
[22:27:46.757] [34mDEBUG[39m (17200): [36mpact@15.0.1: setting header request value for Content-Type at index 0 to "application/json"[39m
2025-09-13T02:27:46.758832Z DEBUG ThreadId(01) pact_ffi::mock_server::handles: Failed to parse the value, treating it as a plain string: expected value at line 1 column 1
2025-09-13T02:27:46.758843Z DEBUG ThreadId(01) pact_ffi::mock_server::handles: parsed header value: Left("application/json")
2025-09-13T02:27:46.758872Z DEBUG ThreadId(01) pact_models::content_types: Detecting content type from contents: '{"data":{"movies":{"min":1,"pact:matcher:type":"type","value":[{"id":1,"name":"Demon Slayer: Infinity Castle","year":2025}]}}}'
2025-09-13T02:27:46.758882Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Path = $
2025-09-13T02:27:46.758885Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Configuring a normal object
2025-09-13T02:27:46.758890Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Path = $.data
2025-09-13T02:27:46.758893Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Configuring a normal object
2025-09-13T02:27:46.758896Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Path = $.data.movies
2025-09-13T02:27:46.758900Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: detected pact:matcher:type, will configure a matcher
2025-09-13T02:27:46.758907Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Path = $.data.movies
2025-09-13T02:27:46.758914Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Path = $.data.movies[*]
2025-09-13T02:27:46.758918Z DEBUG ThreadId(01) pact_ffi::mock_server::bodies: Configuring a normal object
[22:27:46.758] [34mDEBUG[39m (17200): [36mpact@15.0.1: setting header response value for application/json; charset=utf-8 at index 0 to "application/json; charset=utf-8"[39m
2025-09-13T02:27:46.759099Z DEBUG ThreadId(01) pact_ffi::mock_server::handles: Failed to parse the value, treating it as a plain string: expected value at line 1 column 1
2025-09-13T02:27:46.759109Z DEBUG ThreadId(01) pact_ffi::mock_server::handles: parsed header value: Left("application/json; charset=utf-8")
[22:27:46.758] [34mDEBUG[39m (17200): [36mpact@15.0.1: Setting up Pact mock server with Consumer "GraphQLConsumer" and Provider "GraphQLProvider"
        using mock service on Port: "4000"[39m
2025-09-13T02:27:46.759378Z DEBUG ThreadId(01) pact_mock_server::mock_server: Started mock server on 127.0.0.1:4000
[22:27:46.758] [34mDEBUG[39m (17200): [36mpact@15.0.1: mock service started on port: 4000[39m
  console.error


      44 |     // Verify the consumer expectations
      45 |     afterEach(async () => {
    > 46 |         await provider.verify()
         |                        ^
      47 |     });
      48 |
      49 |

      at Pact.Object.<anonymous>.Pact.verify (node_modules/@pact-foundation/src/httpPact/index.ts:209:15)
      at Object.verify (graphql/consumer/graphql-client-contract.glen.spec.js:46:24)

  console.error
    Pact verification failed!

      44 |     // Verify the consumer expectations
      45 |     afterEach(async () => {
    > 46 |         await provider.verify()
         |                        ^
      47 |     });
      48 |
      49 |

      at Pact.Object.<anonymous>.Pact.verify (node_modules/@pact-foundation/src/httpPact/index.ts:210:15)
      at Object.verify (graphql/consumer/graphql-client-contract.glen.spec.js:46:24)

  console.error
    Test failed for the following reasons:
    
      Mock server failed with the following mismatches:
    
    	0) The following request was expected but not received: 
    	    Method: POST
    	    Path: /graphql
    	    Headers:
    	      Content-Type: application/json
    	    Body: {"operationName":"Mo... (304 length)

      44 |     // Verify the consumer expectations
      45 |     afterEach(async () => {
    > 46 |         await provider.verify()
         |                        ^
      47 |     });
      48 |
      49 |

      at Pact.Object.<anonymous>.Pact.verify (node_modules/@pact-foundation/src/httpPact/index.ts:211:15)
      at Object.verify (graphql/consumer/graphql-client-contract.glen.spec.js:46:24)

[22:27:46.782] [34mDEBUG[39m (17200): [36mpact@15.0.1: cleaning up old mock server on port 4000[39m
2025-09-13T02:27:46.782882Z DEBUG ThreadId(01) pact_matching::metrics: Could not get the tokio runtime, will not send metrics - there is no reactor running, must be called from the context of a Tokio 1.x runtime
2025-09-13T02:27:46.782902Z DEBUG ThreadId(01) pact_mock_server::server_manager: Shutting down mock server with ID b9b535f9-ca23-4519-b67b-530f463446d0 - MockServerMetrics { requests: 0, requests_by_path: {} }
2025-09-13T02:27:46.782916Z DEBUG ThreadId(01) pact_mock_server::mock_server: Mock server b9b535f9-ca23-4519-b67b-530f463446d0 shutdown - MockServerMetrics { requests: 0, requests_by_path: {} }
2025-09-13T02:27:46.782931Z DEBUG tokio-runtime-worker hyper::server::shutdown: signal received, starting graceful shutdown
